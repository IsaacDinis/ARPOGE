#! /usr/bin/env python

import os
import platform

if platform.system() == "Darwin":
	my_ld_flags = ['']
	my_cxx_flags = ['-std=c++14']
	my_cflags = ['-O3', '-ffast-math']
	my_link_flags = ['-L'+os.getenv('DAOROOT')+'/lib/']
else:
	my_ld_flags = ['-lrt']
	my_cxx_flags = ['']
	my_cflags = ['-Ofast']
	my_link_flags = ['-L'+os.getenv('DAOROOT')+'/lib/','-L'+os.getenv('DAOROOT')+'/lib64/']

bin_dir = os.path.join(bld.path.abspath(), '../bin')
if not os.path.exists(bin_dir):
    os.makedirs(bin_dir)

hrtc = bld.program(
	source = 'hrtc.c',
	target = 'hrtc',
	includes = '../include '+os.getenv('DAOROOT')+'/include/',
	linkflags = my_link_flags,
	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio'] + my_ld_flags,
	use = ['utils','toml'],
	cflags = my_cflags + ['-Wall', '-Wextra', '-Werror', '-pipe', '-fdiagnostics-color=auto'],
    install_path =bin_dir
)


test_fits = bld.program(
    source = 'test_fits.c',
    target = 'test_fits',
    includes = '../include ' + os.getenv('DAOROOT') + '/include/',
    linkflags = my_link_flags + ['-Wl,--no-as-needed'],
    ldflags = ['-ldao', '-lpthread', '-lm', '-lcfitsio'] + my_ld_flags,
    use = ['utils','toml'],
    cflags = my_cflags + ['-Wall', '-Wextra', '-Werror', '-pipe', '-fdiagnostics-color=auto'],
    install_path =bin_dir
)

test_toml = bld.program(
    source = 'test_toml.c',
    target = 'test_toml',
    includes = '../include ' + os.getenv('DAOROOT') + '/include/',
	linkflags = my_link_flags ,
    ldflags = ['-ldao', '-lpthread', '-lm', '-lcfitsio'] + my_ld_flags,
    use = ['utils','toml'],
    cflags = my_cflags + ['-Wall', '-Wextra', '-Werror', '-pipe', '-fdiagnostics-color=auto'],
    install_path =bin_dir
)

hrtc_new = bld.program(
	source = 'hrtc_new.c',
	target = 'hrtc_new',
	includes = '../include '+os.getenv('DAOROOT')+'/include/',
	linkflags = my_link_flags,
	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio'] + my_ld_flags,
	use = ['utils','toml'],
	cflags = my_cflags + ['-Wall', '-Wextra', '-Werror', '-pipe', '-fdiagnostics-color=auto'],	
    install_path =bin_dir
)

pix2modes = bld.program(
	source = 'pix2modes.c',
	target = 'pix2modes',
	includes = '../include '+os.getenv('DAOROOT')+'/include/',
	linkflags = my_link_flags,
	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio'] + my_ld_flags,
	use = ['utils','toml'],
	cflags = my_cflags + ['-Wall', '-Wextra', '-pipe', '-fdiagnostics-color=auto'],	
    install_path =bin_dir
)

# pix2modes_cuda = bld.program(
# 	source = 'pix2modes_cuda.c',
# 	target = 'pix2modes_cuda',
# 	includes = ['../include '+os.getenv('DAOROOT')+'/include/']+bld.env.INCLUDES_CUDA,
# 	linkflags = my_link_flags + ['-L' + p for p in bld.env.LIBPATH_CUDA],
# 	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio','-lcublas', '-lcudart'] + my_ld_flags,
# 	use = ['utils','toml'],
# 	cflags = my_cflags + ['-Wall', '-Wextra', '-pipe', '-fdiagnostics-color=auto'],	
#     install_path =bin_dir
# )


# pix2modes_cuda = bld.program(
# 	source = 'pix2modes_cuda.c',
# 	target = 'pix2modes_cuda',
# 	includes = ['../include '+os.getenv('DAOROOT')+'/include/']+bld.env.INCLUDES_CUDA,
# 	linkflags = my_link_flags + ['-L' + p for p in bld.env.LIBPATH_CUDA],
# 	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio','-lcublas', '-lcudart'] + my_ld_flags,
# 	use = ['utils','toml'],
# 	cflags = my_cflags + ['-Wall', '-Wextra', '-pipe', '-fdiagnostics-color=auto'],	
#     install_path =bin_dir
# )

# pix2modes_cuda = bld.program(
# 	source = 'pix2modes_cuda.c',
# 	target = 'pix2modes_cuda',
# 	includes = '../include '+os.getenv('DAOROOT')+'/include/',
# 	linkflags = my_link_flags,
# 	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio'] + my_ld_flags,
# 	use = ['utils','toml'],
# 	cflags = my_cflags + ['-Wall', '-Wextra', '-pipe', '-fdiagnostics-color=auto'],	
#     install_path =bin_dir
# )


pix2modes_cuda = bld.program(
	source = 'pix2modes_cuda.c',
	target = 'pix2modes_cuda',
	includes = [
    '../include',
    os.getenv('DAOROOT') + '/include'
] + bld.env.INCLUDES_CUDA,
	linkflags = my_link_flags + ['-L' + p for p in bld.env.LIBPATH_CUDA],
	ldflags = ['-ldao' , '-lpthread', '-lm', '-lcfitsio','-lcublas', '-lcudart'] + my_ld_flags,
	use = ['utils','toml'],
	cflags = my_cflags + ['-Wall', '-Wextra', '-pipe', '-fdiagnostics-color=auto'],	
    install_path =bin_dir
)